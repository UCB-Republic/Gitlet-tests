==================== argv (no subcommand)
%
=> 0
=> 2
! Need a subcommand


==================== argv (unknown subcommand)
% whosyourdaddy
=> 0
=> 2
! Unknown command: whosyourdaddy


==================== init (normal)
% init
# TODO @ init


==================== init (existing regular file)
$ touch .gitlet
% init
=> 0
: A gitlet version control system already exists in the current directory.
=> 1
! .gitlet already exists but it is not a directory


==================== init (existing dir)
$ mkdir .gitlet
$ echo hello > .gitlet/world
$ mkdir .gitlet/foo
% init
=> 0
: A gitlet version control system already exists in the current directory.
=> 1
! A Gitlet repo already exists
$ mkdir -p expected/foo
$ echo hello > expected/world
$ diff -r expected .gitlet || fail "init should not modify existing repos"


==================== init (no permission to mkdir)
$ chmod u-w .
% init
=> 0
=> 1
! IO ERROR: Failed to create directory: .gitlet


# TODO test "initial commit"


==================== status (empty repo)
% init
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== status (example from spec)
$ mkdir some_folder
$ touch wug.txt some_folder/wugs.txt goodbye.txt
% init
% branch other-branch
% add goodbye.txt
% commit 'Add goodbye.txt'
% add wug.txt
% add some_folder/wugs.txt
% rm goodbye.txt
% status
: === Branches ===
: *master
: other-branch
:
: === Staged Files ===
: some_folder/wugs.txt
: wug.txt
:
: === Files Marked for Removal ===
: goodbye.txt


==================== add (file not found)
% init
% add foo
=> 0
: File does not exist.
=> 1
! File does not exist: foo


==================== add (file not modified)
% init
$ echo hello > diary
% add diary
% commit 'First day'
% add diary
=> 0
: File has not been modified since the last commit.
=> 1
! File has not been modified since the last commit.


==================== add (repeatedly add)
% init
$ echo hello > diary
% add diary
% add diary
% add diary
% add diary
# should not see duplicate entries
% status
: === Branches ===
: *master
:
: === Staged Files ===
: diary
:
: === Files Marked for Removal ===
% commit 'First day'


==================== add and unmark
% init
$ echo hello > diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
% add diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
: diary
:
: === Files Marked for Removal ===
% rm diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== remove and unmark
% init
$ echo hello > diary
% add diary
% commit 'First day'
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
% rm diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
: diary
% add diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== remove (keep existing files)
% init
$ echo hello > diary
% add diary
% commit 'First day'
% rm diary
$ [[ -e diary ]] || fail 'rm should not delete existing files'
% commit 'Nobody can see my diary'
$ [[ -e diary ]] || fail 'rm should not delete existing files'


==================== remove (file not here)
# rm should work when file doesn't exist
% init
$ echo hello > diary
% add diary
% commit 'First day'
$ rm diary
% rm diary
% commit 'Nobody can see my diary'


==================== remove (repeatedly remove)
% init
$ echo hello > diary
% add diary
% commit 'First day'
% rm diary
% rm diary
% rm diary
% rm diary
# should not see duplicate entries
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
: diary
% commit 'Nobody can see my diary'


==================== remove (untracked files)
# trying to remove untracked file that's not added
% init
$ echo hello > diary
% add diary
% commit 'First day'
% rm dairy
=> 0
: No reason to remove the file.
=> 1
! Cannot remove: file was not tracked or added.


==================== remove (empty staging area)
% init
% rm sth
=> 0
: No reason to remove the file.
=> 1
! Cannot remove: file was not tracked or added.


==================== commit (normal add with sanity check)
% init
$ echo Yo > foo
% add foo
% commit 'Greetings!'
$ echo Bye > bar
% add bar
$ echo Yoooooo > foo
% add foo
% commit lalala
$ echo ooooooooooooo >> foo
% add foo
% commit 'longer foo'


==================== commit (normal add and rm)
% init
$ echo Yo > foo
% add foo
% commit aaa
% rm foo
% commit bbb
$ echo Yo > foo
$ echo asdf > bar
% add foo
% add bar
% commit ccc
% rm foo
$ cp foo baz
% add baz
% commit ddd
% rm baz
% rm bar
% commit 'nothing left'


==================== commit (normal add with content check)
% init
$ echo Hey > casual
$ echo おはようございます > polite
% add casual
% add polite
% commit 'Greetings!'
$ rm *
% branch exotic
#
# 1st check - exotic
#
% checkout exotic
$ diff <(echo Hey               ) casual || fail "file content doesn't match"
$ diff <(echo おはようございます) polite || fail "file content doesn't match"
$ rm casual polite
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"
$ echo Selama Pagi > weird
% add weird
% commit 'something from Nichijou'
#
# 2nd check - master
#
% checkout master
# untracked files should not be removed
$ diff <(echo Hey               ) casual || fail "file content doesn't match"
$ diff <(echo おはようございます) polite || fail "file content doesn't match"
$ diff <(echo Selama Pagi       ) weird  || fail "file content doesn't match"
$ rm casual polite weird
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"
#
# 3rd check - exotic
#
% checkout exotic
$ diff <(echo Hey               ) casual || fail "file content doesn't match"
$ diff <(echo おはようございます) polite || fail "file content doesn't match"
$ diff <(echo Selama Pagi       ) weird  || fail "file content doesn't match"
$ rm casual polite weird
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"
#
# 4th check - master
#
% checkout master
$ diff <(echo Hey               ) casual || fail "file content doesn't match"
$ diff <(echo おはようございます) polite || fail "file content doesn't match"
$ rm casual polite
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"


==================== commit (file modified after add)
% init
$ echo old > foo
% add foo
$ echo new > foo
% commit 'I shall store the new version'
$ rm foo
% checkout foo
$ diff <(echo new) foo || fail "commit should take the latest version of a file, not the add time version"


==================== commit (file marked but not modified)
% init
$ echo old > foo
% add foo
% commit 'something to begin with'
$ echo new > foo
% add foo
$ echo old > foo
% commit 'Nothing changed'


==================== commit (no commit message)
# see also "empty message"
% init
$ touch foo
% add foo
% commit
=> 0
: Please enter a commit message.
=> 2
! Need more arguments
! Usage: java Gitlet commit MESSAGE
# TODO Our unified message doesn't look so nice


==================== commit (empty commit)
% init
% commit 'Empty commit (should fail)'
=> 0
: No changes added to the commit.
=> 1
! No changes added to the commit.


==================== log (sanity check)
$ echo 123 > aaa; echo 456 > bbb; echo 789 > ccc; echo yay > aya
% init
% add aaa
% commit 1st
% add bbb
% commit 2nd
% add ccc
% commit 3rd
% add aya
$ java -jar ../../gitlet.jar log > ../actual/stdout 2> ../actual/stderr
$ grep -q 3rd ../actual/stdout || fail 'log output should contain the 3rd commit'
$ grep -q 2nd ../actual/stdout || fail 'log output should contain the 2nd commit'
$ grep -q 1st ../actual/stdout || fail 'log output should contain the 1st commit'
$ grep -q 'initial commit' ../actual/stdout || fail 'log output should contain the 0th commit'


# TODO ==================== log (format check)
# TODO ==================== log (order check)


==================== log (should only output one chain)
$ echo 123 > aaa; echo 456 > bbb; echo 789 > ccc; echo yay > aya
% init
% add aaa
% add bbb
% commit 1st
% branch haha
% add ccc
% commit more
% checkout haha
% add aya
% commit wow
$ java -jar ../../gitlet.jar log > ../actual/stdout 2> ../actual/stderr
$ [[ 14 == $(wc -l < ../actual/stdout) ]] || fail 'log should output exactly 3 commits'
$ grep -q more ../actual/stdout && fail 'log output should not contain the "more" commit'
$ grep -q wow  ../actual/stdout || fail 'log output should contain the "wow" commit'
$ grep -q 1st  ../actual/stdout || fail 'log output should contain the "1st" commit'
$ grep -q 'initial commit' ../actual/stdout || fail 'log output should contain the initial commit'
% checkout master
$ java -jar ../../gitlet.jar log > ../actual/stdout 2> ../actual/stderr
$ [[ 14 == $(wc -l < ../actual/stdout) ]] || fail 'log should output exactly 3 commits'
$ grep -q wow  ../actual/stdout && fail 'log output should not contain the "wow" commit'
$ grep -q more ../actual/stdout || fail 'log output should contain the "more" commit'
$ grep -q 1st  ../actual/stdout || fail 'log output should contain the "1st" commit'
$ grep -q 'initial commit' ../actual/stdout || fail 'log output should contain the initial commit'


# TODO ==================== global log (format check)
# TODO ==================== global log (order check)


==================== global log (should output whole tree)
$ echo 123 > aaa; echo 456 > bbb; echo 789 > ccc; echo yay > aya
% init
% add aaa
% add bbb
% commit 1st
% branch haha
% add ccc
% commit more
% checkout haha
% add aya
% commit wow
$ java -jar ../../gitlet.jar global-log > ../actual/stdout 2> ../actual/stderr
$ [[ 19 == $(wc -l < ../actual/stdout) ]] || fail 'global log should output all 4 commits in the tree'
$ grep -q wow  ../actual/stdout || fail 'log output should not contain the "wow" commit'
$ grep -q more ../actual/stdout || fail 'log output should contain the "more" commit'
$ grep -q 1st  ../actual/stdout || fail 'log output should contain the "1st" commit'
$ grep -q 'initial commit' ../actual/stdout || fail 'log output should contain the initial commit'


==================== global log (not ancestors or not even reachable)
#                  ----  comL < master
#  com0 ---- com1
#                  ----  comR ---- orphan
#                         ^
#                        dev
$ # Full of temp workaround
% init
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'say hi'
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
% branch dev
$ echo hello > foo
% add foo
% commit 'say hello'
% checkout dev
$ echo hello > foo
% add foo
% commit 'hawayu'
$ comidR=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-121-len('$comid0$comid1')])")
% rm foo
% commit 'to the beginning'
% reset "$comidR"
$ java -jar ../../gitlet.jar global-log > ../actual/stdout 2> ../actual/stderr
$ [[ 24 == $(wc -l < ../actual/stdout) ]] || fail 'global log should output all 5 commits in the tree'
$ grep -q 'to the beginning' ../actual/stdout || fail 'log output should contain orphaned commits'
$ grep -q 'hawayu'           ../actual/stdout || fail 'log output should contain the current commit'
$ grep -q 'say hello'        ../actual/stdout || fail 'log output should contain commits in other branches'
$ grep -q 'say hi'           ../actual/stdout || fail 'log output should contain the split point'
$ grep -q 'initial commit'   ../actual/stdout || fail 'log output should contain the initial commit'


==================== branch (sanity check)
% init
% branch one
% branch another
% branch some-more


==================== branch (do not change current branch)
% init
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
% branch z
% status
: === Branches ===
: *master
: z
:
: === Staged Files ===
:
: === Files Marked for Removal ===
% branch haha
% status
: === Branches ===
: haha
: *master
: z
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== branch (do not touch staging area)
% init
$ echo hello > foo
% add foo
% commit 'say hi'
% rm foo
$ echo morning > bar
% add bar
% status
: === Branches ===
: *master
:
: === Staged Files ===
: bar
:
: === Files Marked for Removal ===
: foo
% branch nanosecond
% status
: === Branches ===
: *master
: nanosecond
:
: === Staged Files ===
: bar
:
: === Files Marked for Removal ===
: foo


==================== branch (branch exists)
% init
% branch master
=> 0
: A branch with that name already exists.
=> 1
! A branch with that name already exists.
% branch foo
% branch foo
=> 0
: A branch with that name already exists.
=> 1
! A branch with that name already exists.


==================== checkout branch (do not touch staging area)
% init
$ echo hello > foo
% add foo
% commit 'say hi'
% rm foo
$ echo 'Yahalo~' > bar
% add bar
% branch dev
% checkout dev
% commit "world's cutting-edge greetings"
$ touch silence
% rm bar
% add silence
% status
: === Branches ===
: *dev
: master
:
: === Staged Files ===
: silence
:
: === Files Marked for Removal ===
: bar
% checkout master
% status
: === Branches ===
: dev
: *master
:
: === Staged Files ===
: silence
:
: === Files Marked for Removal ===
: bar
% checkout dev
% status
: === Branches ===
: *dev
: master
:
: === Staged Files ===
: silence
:
: === Files Marked for Removal ===
: bar


==================== checkout file (do not touch staging area)
% init
$ # Temp workaround
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'say hi'
$ # Temp workaround
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
$ echo hello > foo
% add foo
% commit 'say hello'
$ echo 'Yahalo~' > bar
% add bar
% rm foo
% checkout "$comid1" foo
% status
: === Branches ===
: *master
:
: === Staged Files ===
: bar
:
: === Files Marked for Removal ===
: foo
% checkout foo
% status
: === Branches ===
: *master
:
: === Staged Files ===
: bar
:
: === Files Marked for Removal ===
: foo


==================== checkout branch (checking out current branch)
% init
% checkout master
=> 0
: No need to checkout the current branch.
=> 1
! No need to checkout the current branch.


==================== checkout branch (branch not found)
% init
% checkout future-version
=> 0
: File does not exist in the most recent commit, or no such branch exists.
=> 1
! No matching branch and no matching file in the current commit


==================== checkout file (commit not found)
# There's at most one commit, so if we try two IDs, at least one will fail.
# We won't bother to do that, though.
% init
$ # Temp workaround
$ comid=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
% checkout 000"$comid" myfile
=> 0
: No commit with that id exists.
=> 1
! Commit does not exist


==================== checkout file (file not found)
% init
$ # Temp workaround
$ comid=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ touch foo
% add foo
% commit foo
% checkout myfile
=> 0
: File does not exist in the most recent commit, or no such branch exists.
=> 1
! No matching branch and no matching file in the current commit
% checkout "$comid" myfile
=> 0
: File does not exist in that commit.
=> 1
! File does not exist in the specified commit


==================== checkout file (normal operation)
% init
$ # Temp workaround
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'say hi'
$ # Temp workaround
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
$ echo hello > foo
% add foo
% commit 'say hello'
$ # checking out when file exists
% checkout "$comid1" foo
$ diff <(echo hi) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo foo; echo .gitlet) || fail "extra file(s) detected"
% checkout foo
$ diff <(echo hello) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo foo; echo .gitlet) || fail "extra file(s) detected"
$ # checking out when file doesn't exist
$ rm foo
% checkout foo
$ diff <(echo hello) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo foo; echo .gitlet) || fail "extra file(s) detected"
$ rm foo
% checkout "$comid1" foo
$ diff <(echo hi) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo foo; echo .gitlet) || fail "extra file(s) detected"


==================== commit (message not in one argument)
$ touch foo bar
% init
% add foo
% commit 'This is a sentence'
% add bar
% commit This is a sentence
=> 0
=> 2
! Too many arguments
! Usage: java Gitlet commit MESSAGE


==================== commit (empty message)
# see also "no commit message"
% init
$ touch foo
% add foo
% commit ''
=> 0
: Please enter a commit message.
=> 2
! Please enter a non-empty commit message


==================== commit (special message)
$ touch {1..20}
% init
% add 1
% commit .
% add 2
% commit ..
% add 3
% commit /
% add 4
% commit \\
% add 5
% commit '*'
% add 6
% commit ~


==================== commit (weird message)
$ touch {1..20}
% init
% add 1
% commit 'qwertyuiopasdfghjklzxcvbnm,QWERTYUIOPASDFGHJKLZXCVBNM,1234567890'
% add 2
% commit '\`~!@#$%^&*()_+-=[]\{}|,./<>?:";'"'"
% add 3
% commit '色は匂へえど いつか散りぬるを さ迷うことさえ 許せなかった'
% add 4
% commit '≈₂ïç'
% add 5
% commit '     '
# CJK whitespace
% add 6
% commit '　'
$ # hope you don't hear weird sound (from \a)
% add 7
% commit $'\n\r\a\t\f\0\e'


==================== commit (long message)
$ touch foo
$ msg=''; for ((i=0; i<2049; i++)); do msg+=x; done
% init
% add foo
% commit "$msg"


==================== reset (commit not found)
% init
$ # Temp workaround
$ comid=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
% reset 000"$comid"
=> 0
: No commit with that id exists.
=> 1
! Commit does not exist


==================== reset (back and forth on a chain)
% init
$ # Temp workaround
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'say hi'
$ # Temp workaround
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
$ echo hello > foo
% add foo
% commit 'say hello'
$ # Temp workaround
$ comid2=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-124-len('$comid0$comid1')])")
$ # resetting when file exists
$ touch extra
% reset "$comid1"
$ diff <(echo hi) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo extra; echo foo; echo .gitlet) || fail "extra/missing file(s) detected"
% reset "$comid2"
$ diff <(echo hello) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo extra; echo foo; echo .gitlet) || fail "extra/missing file(s) detected"
% reset "$comid0"
$ diff <(ls -1A) <(echo extra; echo foo; echo .gitlet) || fail "extra/missing file(s) detected"
$ # resetting when file doesn't exist
$ rm *
% reset "$comid1"
$ diff <(echo hi) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo foo; echo .gitlet) || fail "extra file(s) detected"
$ rm *
% reset "$comid2"
$ diff <(echo hello) foo  || fail "file content doesn't match"
$ diff <(ls -1A) <(echo foo; echo .gitlet) || fail "extra file(s) detected"
$ rm *
% reset "$comid0"
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"


==================== find (no matches)
% init
% find haha
=> 0
: Found no commit with that message.
=> 0


==================== find (must match whole string)
% init
$ # Temp workaround
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'foo bar baz'
$ # Temp workaround
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-84-len('$comid0')])")
$ # contains
% find bar
=> 0
: Found no commit with that message.
=> 0
$ # startswith
% find foo
=> 0
: Found no commit with that message.
=> 0
$ java -jar ../../gitlet.jar find 'foo bar baz' > ../actual/stdout 2> ../actual/stderr
$ diff <(echo "$comid1") ../actual/stdout || fail "find 'foo bar baz' should list the 2nd commit"


==================== find (3 different messages)
$ # Full of temp workaround
% init
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'say hi'
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
$ echo hello > foo
% add foo
% commit 'say hello'
$ comid2=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-124-len('$comid0$comid1')])")
$ # stderr is not checked
$ java -jar ../../gitlet.jar find 'say hi' > ../actual/stdout 2> ../actual/stderr
$ diff <(echo "$comid1") ../actual/stdout || fail 'find hi should list the 2nd commit'
$ java -jar ../../gitlet.jar find 'say hello' > ../actual/stdout 2> ../actual/stderr
$ diff <(echo "$comid2") ../actual/stdout || fail 'find hello should list the 3rd commit'
$ java -jar ../../gitlet.jar find 'initial commit' > ../actual/stdout 2> ../actual/stderr
$ diff <(echo "$comid0") ../actual/stdout || fail 'find initial should list the 1st commit'


==================== find (3 commits with same messages)
$ # Full of temp workaround
% init
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'initial commit'
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-87-len('$comid0')])")
$ echo hello > foo
% add foo
% commit 'initial commit'
$ comid2=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-137-len('$comid0$comid1')])")
$ # stderr is not checked
$ java -jar ../../gitlet.jar find 'initial commit' > ../actual/stdout 2> ../actual/stderr
$ diff <(echo "$comid0"; echo "$comid1"; echo "$comid2") ../actual/stdout || fail 'all 3 commits should be listed'


==================== find (not ancestors or not even reachable)
#                  ----  comL* < master
#  com0* --- com1
#                  ----  comR ---- orphan*
#                         ^
#                        dev
$ # Full of temp workaround
% init
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo
% add foo
% commit 'say hi'
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
% branch dev
$ echo hello > foo
% add foo
% commit 'initial commit'
$ comidL=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-129-len('$comid0$comid1')])")
% checkout dev
$ echo hello > foo
% add foo
% commit 'actually hello'
$ comidR=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-129-len('$comid0$comid1')])")
% rm foo
% commit 'initial commit'
$ comidOrphan=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-179-len('$comid0$comid1$comidR')])")
% reset "$comidR"
$ # stderr is not checked
$ java -jar ../../gitlet.jar find 'initial commit' > ../actual/stdout 2> ../actual/stderr
$ diff <(echo "$comid0"; echo "$comidL"; echo "$comidOrphan") ../actual/stdout || fail 'all commits should be findable'


==================== merge (simple test)
#                  ----  comL < master (foo, bar)
#  com0 ---- com1
#                  ----  comR < dev (foo, baz)
#
# XXX This test assumes merging doesn't recreate "our" files
#     Different people may have different implementation.
#
$ # Full of temp workaround
% init
$ comid0=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c 'import sys; print(sys.stdin.read()[12:-37])')
$ echo hi > foo; echo I never change > eternal
% add foo
% add eternal
% commit 'say hi'
$ comid1=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-79-len('$comid0')])")
% branch dev
$ echo hello > foo; echo yo > bar
% add foo
% add bar
% commit 'say hello'
$ comidL=$(java -jar ../../gitlet.jar log 2>/dev/null | python3 -c "import sys; print(sys.stdin.read()[12:-124-len('$comid0$comid1')])")
% checkout dev
$ echo hawayu > foo; echo good morning > baz
% add foo
% add baz
% commit 'hawayu'
$ rm *
% merge master
$ diff <(echo hello) foo.conflicted || fail "file content doesn't match"
$ diff <(echo yo   ) bar            || fail "file content doesn't match"
$ rm foo.conflicted bar
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"


==================== merge (with future)
# XXX This test assumes merging doesn't recreate "our" files
#     Different people may have different implementation.
#
% init
$ echo hi > foo; echo I never change > eternal
% add foo
% add eternal
% commit 'say hi'
% branch dev
$ echo hello > foo; echo yo > bar
% add foo
% add bar
% commit 'say hello'
% checkout dev
$ rm *
% merge master
$ diff <(echo hello) foo || fail "file content doesn't match"
$ diff <(echo yo   ) bar || fail "file content doesn't match"
$ rm foo bar
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"


==================== merge (with past)
# XXX This test assumes merging doesn't recreate "our" files
#     Different people may have different implementation.
#
% init
$ echo hi > foo; echo I never change > eternal
% add foo
% add eternal
% commit 'say hi'
% branch dev
$ echo hello > foo; echo yo > bar
% add foo
% add bar
% commit 'say hello'
$ rm *
% merge dev
$ # Temp workaround
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"


==================== merge (branch not found)
% init
% merge mysterious
=> 0
: A branch with that name does not exist.
=> 1
! Branch does not exist


==================== merge (merge self)
% init
% merge master
=> 0
: Cannot merge a branch with itself.
=> 0
! Already up to date


==================== rebase (branch not found)
% init
% rebase mysterious
=> 0
: A branch with that name does not exist.
=> 1
! Branch does not exist


==================== rebase (onto self)
% init
% rebase master
=> 0
: Cannot rebase a branch onto itself.
=> 0


==================== rebase (onto future)
# XXX This test assumes fast-forward also updates working directory.
#     Different people may have different implementation.
% init
$ echo hi > foo; echo I never change > eternal
% add foo
% add eternal
% commit 'say hi'
% branch dev
$ echo hello > foo; echo yo > bar
% add foo
% add bar
% commit 'say hello'
$ echo hawayu > foo; echo good morning > baz
% add foo
% add baz
% commit 'good morning'
$ java -jar ../../gitlet.jar log        > ../actual/masterlog       2> ../actual/stderr
$ java -jar ../../gitlet.jar global-log > ../actual/mastergloballog 2> ../actual/stderr
% checkout dev
$ rm *
% rebase master
$ java -jar ../../gitlet.jar log        > ../actual/devlog          2> ../actual/stderr
$ java -jar ../../gitlet.jar global-log > ../actual/devgloballog    2> ../actual/stderr
$ diff ../actual/masterlog       ../actual/devlog       || fail "rebasing onto a future commit should only move the branch pointer"
$ diff ../actual/mastergloballog ../actual/devgloballog || fail "rebasing onto a future commit should only move the branch pointer"
$ diff <(echo I never change) eternal || fail "file content doesn't match"
$ diff <(echo hawayu        ) foo     || fail "file content doesn't match"
$ diff <(echo yo            ) bar     || fail "file content doesn't match"
$ diff <(echo good morning  ) baz     || fail "file content doesn't match"
$ rm eternal foo bar baz
$ diff <(ls -1A) <(echo .gitlet) || fail "extra file(s) detected"
$ java -jar ../../gitlet.jar log > ../actual/stdout 2> ../actual/stderr


==================== rebase (onto past)
% init
$ echo hi > foo; echo I never change > eternal
% add foo
% add eternal
% commit 'say hi'
% branch dev
$ echo hello > foo; echo yo > bar
% add foo
% add bar
% commit 'say hello'
$ echo hawayu > foo; echo good morning > baz
% add foo
% add baz
% commit 'good morning'
% rebase dev
=> 0
: Already up-to-date.
=> 0
! Already up-to-date.







# TODO
#     如果是没有权限访问.gitlet，FileUtil.filetype会返回什么？
#
#
#
# 注:
#     case必须用如下格式开始:
#         一行。20个=，然后arbitrary的东西（可以放空）
#         （=之后的东西如果符合一定条件，会被作为类似testcase name的东西。详见代码。）
#     case必须以1+个空行结束
#         TODO 忽略空行。不需要结束符（遇到下一个case或者EOF的时候就视为case结束）。
#
#     # comment
#     $ shell command (NOTE will be run in Bash) (TODO 现在用heredoc会导致某些expansion在“注释”中还是会生效)
#     % Gitlet command
#     => term stat
#     : stdout (allow omitting the space, but if there's a space it will be consumed)
#     ! stderr (allow omitting the space, but if there's a space it will be consumed)
#     // TODO @ if “@ foo”, then working dir must match ${TESTCASE_DIR}/foo/wd/ (including .gitlet)
#     //      NOTE 不支持两种模式不同的情况
#     //空行被忽略
#     除此之外的行都被视为错误
#
#     对于每个%，必须有一段:和一段!。这是为了避免“没有输出”和“输出为空”之间的歧义。
#     （因为必须有一段:，所以如果找不到:，就意味着这段包含0行）
#     如果没有=>，则认为是0。
#     如果CS61B和APP两种模式行为相同，则只要写一遍=>、:、!。如果不同，则必须写两个=>和两段:和两段!，不能省略。
#     顺序是: CS61B term stat、CS61B stdout、CS61B stderr、APP term stat、APP stdout、APP stderr
#     $和%和@必须按照Bash的语法来quote
#
#     在每个case开始的时候，working dir是完全空白的。（在case结束后）
#     TODO 目前暂无沙盒
#     TODO 暂不支持stdin
#     NOTE 不支持不完整的行（即: 不以LF结尾的输出）、不一定支持control chars
#
#     Trick: You can use abort and fail in shell commands.
#     However, do not use comments in Gitlet commands because they'll comment out the output redirections.
#
