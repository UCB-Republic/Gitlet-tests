==================== argv (no subcommand)
%
=> 0
=> 2
! Need a subcommand


==================== argv (unknown subcommand)
% whosyourdaddy
=> 0
=> 2
! Unknown command: whosyourdaddy


==================== init (normal)
% init
# TODO @ init


==================== init (existing regular file)
$ touch .gitlet
% init
=> 0
: A gitlet version control system already exists in the current directory.
=> 1
! .gitlet already exists but it is not a directory


==================== init (existing dir)
$ mkdir .gitlet
$ echo hello > .gitlet/world
$ mkdir .gitlet/foo
% init
=> 0
: A gitlet version control system already exists in the current directory.
=> 1
! A Gitlet repo already exists
$ mkdir -p expected/foo
$ echo hello > expected/world
$ diff -r expected .gitlet || fail "init should not modify existing repos"


==================== init (no permission to mkdir)
$ chmod u-w .
% init
=> 0
=> 1
! IO ERROR: Failed to create directory: .gitlet


# TODO test "initial commit"


==================== status (empty repo)
% init
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== status (example from spec)
$ mkdir some_folder
$ touch wug.txt some_folder/wugs.txt goodbye.txt
% init
% branch other-branch
% add goodbye.txt
% commit 'Add goodbye.txt'
% add wug.txt
% add some_folder/wugs.txt
% rm goodbye.txt
% status
: === Branches ===
: *master
: other-branch
:
: === Staged Files ===
: some_folder/wugs.txt
: wug.txt
:
: === Files Marked for Removal ===
: goodbye.txt


==================== add (file not found)
% init
% add foo
=> 0
: File does not exist.
=> 1
! File does not exist: foo


==================== add (file not modified)
% init
$ echo hello > diary
% add diary
% commit 'First day'
% add diary
=> 0
: File has not been modified since the last commit.
=> 1
! File has not been modified since the last commit.


==================== add (repeatedly add)
% init
$ echo hello > diary
% add diary
% add diary
% add diary
% add diary
# should not see duplicate entries
% status
: === Branches ===
: *master
:
: === Staged Files ===
: diary
:
: === Files Marked for Removal ===
% commit 'First day'


==================== add and unmark
% init
$ echo hello > diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
% add diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
: diary
:
: === Files Marked for Removal ===
% rm diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== remove and unmark
% init
$ echo hello > diary
% add diary
% commit 'First day'
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
% rm diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
: diary
% add diary
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===


==================== remove (keep existing files)
% init
$ echo hello > diary
% add diary
% commit 'First day'
% rm diary
$ [[ -e diary ]] || fail "rm should not delete existing files'
% commit 'Nobody can see my diary'
$ [[ -e diary ]] || fail "rm should not delete existing files'


==================== remove (file not here)
# rm should work when file doesn't exist
% init
$ echo hello > diary
% add diary
% commit 'First day'
$ rm diary
% rm diary
% commit 'Nobody can see my diary'


==================== remove (repeatedly remove)
% init
$ echo hello > diary
% add diary
% commit 'First day'
% rm diary
% rm diary
% rm diary
% rm diary
# should not see duplicate entries
% status
: === Branches ===
: *master
:
: === Staged Files ===
:
: === Files Marked for Removal ===
: diary
% commit 'Nobody can see my diary'


==================== remove (untracked files)
# trying to remove untracked file that's not added
% init
$ echo hello > diary
% add diary
% commit 'First day'
% rm dairy
=> 0
: No reason to remove the file.
=> 1
! Cannot remove: file was not tracked or added.


==================== remove (empty staging area)
% init
% rm sth
=> 0
: No reason to remove the file.
=> 1
! Cannot remove: file was not tracked or added.


==================== commit (normal add with sanity check)
% init
$ echo Yo > foo
% add foo
% commit 'Greetings!'
$ echo Bye > bar
% add bar
$ echo Yoooooo > foo
% add foo
% commit lalala
$ echo ooooooooooooo >> foo
% add foo
% commit 'longer foo'


==================== commit (normal add and rm)
% init
$ echo Yo > foo
% add foo
% commit aaa
% rm foo
% commit bbb
$ echo Yo > foo
$ echo asdf > bar
% add foo
% add bar
% commit ccc
% rm foo
$ cp foo baz
% add baz
% commit ddd
% rm baz
% rm bar
% commit 'nothing left'


==================== commit (normal add with content check)
% init
$ echo Hey > casual
$ echo おはようございます > polite
% add casual
% add polite
% commit 'Greetings!'
$ rm *
% branch exotic
#
# 1st check - exotic
#
% checkout exotic
$ echo Hey > casual_expected
$ echo おはようございます > polite_expected
$ diff casual_expected casual || fail "file content doesn't match"
$ diff polite_expected polite || fail "file content doesn't match"
$ rm casual polite casual_expected polite_expected
#$ rm -r .gitlet
#$ ls -A
$ ls > files; diff files /dev/null || fail "extra file(s) detected"
$ echo Selama Pagi > weird
% add weird
% commit 'something from Nichijou'
#
# 2nd check - master
#
% checkout master
$ echo Hey > casual_expected
$ echo おはようございます > polite_expected
# untracked files should not be removed
$ echo Selama Pagi > weird_expected
$ diff casual_expected casual || fail "file content doesn't match"
$ diff polite_expected polite || fail "file content doesn't match"
$ diff  weird_expected  weird || fail "file content doesn't match"
$ rm casual polite weird casual_expected polite_expected weird_expected
#$ rm -r .gitlet
$ ls > files; diff files /dev/null || fail "extra file(s) detected"
#
# 3rd check - exotic
#
% checkout master
$ echo Hey > casual_expected
$ echo おはようございます > polite_expected
$ echo Selama Pagi > weird_expected
$ diff casual_expected casual || fail "file content doesn't match"
$ diff polite_expected polite || fail "file content doesn't match"
$ diff  weird_expected  weird || fail "file content doesn't match"
$ rm casual polite weird casual_expected polite_expected weird_expected
#$ rm -r .gitlet
$ ls > files; diff files /dev/null || fail "extra file(s) detected"
#
# 4th check - master
#
% checkout master
$ echo Hey > casual_expected
$ echo おはようございます > polite_expected
$ diff casual_expected casual || fail "file content doesn't match"
$ diff polite_expected polite || fail "file content doesn't match"
$ rm casual polite casual_expected polite_expected
#$ rm -r .gitlet
$ ls > files; diff files /dev/null || fail "extra file(s) detected"


==================== commit (file modified after add)
% init
$ echo old > foo
% add foo
$ echo new > foo
% commit 'I shall store the new version'
$ rm foo
% checkout foo
$ echo new > expected
$ diff expected foo || fail "commit should take the latest version of a file, not the add time version"


==================== commit (file marked but not modified)
% init
$ echo old > foo
% add foo
% commit 'something to begin with'
$ echo new > foo
% add foo
$ echo old > foo
% commit 'Nothing changed'


==================== commit (no commit message)
% init
$ touch foo
% add foo
% commit
=> 0
: Please enter a commit message.
=> 2
! Need more arguments
! Usage: java Gitlet commit MESSAGE
# TODO Our unified message doesn't look so nice


==================== commit (empty commit)
% init
% commit 'Empty commit (should fail)'
=> 0
: No changes added to the commit.
=> 1
! No changes added to the commit.


==================== log
$ echo 123 > aaa; echo 456 > bbb; echo 789 > ccc; echo yay > aya
% init
% add aaa
% add bbb
% commit 1st
% branch haha
% add ccc
% commit more
% checkout haha
% add aya
% commit wow
$ # Temp workaround: please manually check the log
$ java -jar ../../gitlet.jar log
% checkout master
$ java -jar ../../gitlet.jar log


==================== global log
$ echo 123 > aaa; echo 456 > bbb; echo 789 > ccc; echo yay > aya
% init
% add aaa
% add bbb
% commit 1st
% branch haha
% add ccc
% commit more
% checkout haha
% add aya
% commit wow
$ # Temp workaround: please manually check the log
$ java -jar ../../gitlet.jar global-log







# TODO
#     如果是没有权限访问.gitlet，FileUtil.filetype会返回什么？
#
#
#
# 注:
#     case必须用如下格式开始:
#         一行。20个=，然后arbitrary的东西（可以放空）
#         （=之后的东西如果符合一定条件，会被作为类似testcase name的东西。详见代码。）
#     case必须以1+个空行结束
#         TODO 忽略空行。不需要结束符（遇到下一个case或者EOF的时候就视为case结束）。
#
#     # comment
#     $ shell command (NOTE will be run in Bash)
#     % Gitlet command
#     => term stat
#     : stdout (allow omitting the space, but if there's a space it will be consumed)
#     ! stderr (allow omitting the space, but if there's a space it will be consumed)
#     // TODO @ if “@ foo”, then working dir must match ${TESTCASE_DIR}/foo/wd/ (including .gitlet)
#     //      NOTE 不支持两种模式不同的情况
#     //空行被忽略
#     除此之外的行都被视为错误
#
#     对于每个%，必须有一段:和一段!。这是为了避免“没有输出”和“输出为空”之间的歧义。
#     （因为必须有一段:，所以如果找不到:，就意味着这段包含0行）
#     如果没有=>，则认为是0。
#     如果CS61B和APP两种模式行为相同，则只要写一遍=>、:、!。如果不同，则必须写两个=>和两段:和两段!，不能省略。
#     顺序是: CS61B term stat、CS61B stdout、CS61B stderr、APP term stat、APP stdout、APP stderr
#     $和%和@必须按照Bash的语法来quote
#
#     在每个case开始的时候，working dir是完全空白的。（在case结束后）
#     TODO 目前暂无沙盒
#     TODO 暂不支持stdin
#     NOTE 不支持不完整的行（即: 不以LF结尾的输出）、不一定支持control chars
#
#     Trick: You can use abort and fail in shell commands.
#     However, do not use comments in Gitlet commands because they'll comment out the output redirections.
#
